<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced To-Do List</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-image: url('top-view-desk-concept-with-copy-space.jpg');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            transition: background-color 0.3s;
        }

        .container {
            background-color: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 400px;
            transition: background-color 0.3s;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .input-group {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        input[type="text"], input[type="date"] {
            width: 60%;
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ccc;
            margin-right: 5px;
        }

        button {
            width: 35%;
            padding: 8px;
            border-radius: 4px;
            border: none;
            background-color: #5cb85c;
            color: white;
            cursor: pointer;
        }

        button:hover {
            background-color: #4cae4c;
        }

        ul {
            list-style: none;
            padding: 0;
            margin-top: 20px;
        }

        li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background-color: #f9f9f9;
            margin-bottom: 5px;
            border-radius: 4px;
        }

        li.completed {
            text-decoration: line-through;
            color: #888;
        }

        li button {
            background-color: #d9534f;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px;
            cursor: pointer;
        }

        li button:hover {
            background-color: #c9302c;
        }

        .filters {
            margin-top: 10px;
            display: flex;
            justify-content: space-between;
        }

        .filters button {
            width: 30%;
        }

        .task-counter {
            text-align: center;
            margin-top: 20px;
            font-size: 14px;
        }

        .clear-completed {
            width: 100%;
            margin-top: 10px;
            background-color: #d9534f;
            color: white;
        }

        .dark-mode-toggle {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 10px;
        }

        .dark-mode-toggle label {
            margin-right: 10px;
        }

        .dark-mode-toggle input {
            cursor: pointer;
        }

        /* Dark mode styles */
        body.dark-mode {
            background-color: #333;
            color: white;
        }

        .container.dark-mode {
            background-color: #444;
        }

        .container.dark-mode button {
            background-color: #6c757d;
        }

        .container.dark-mode li {
            background-color: #555;
        }

        .container.dark-mode input {
            background-color: #666;
            color: white;
            border-color: #555;
        }

        @media (max-width: 600px) {
            .input-group {
                flex-direction: column;
            }

            input[type="text"], input[type="date"], button {
                width: 100%;
                margin-bottom: 10px;
            }

            .filters button {
                width: 100%;
                margin-bottom: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="dark-mode-toggle">
            <label for="dark-mode">Dark Mode</label>
            <input type="checkbox" id="dark-mode">
        </div>
        <h1>Advanced To-Do List</h1>
        <div class="input-group">
            <input type="text" id="task-input" placeholder="Enter a new task">
            <input type="date" id="due-date-input">
            <button id="add-task-btn">Add Task</button>
        </div>
        <div class="filters">
            <button id="filter-all">All</button>
            <button id="filter-completed">Completed</button>
            <button id="filter-pending">Pending</button>
        </div>
        <ul id="task-list"></ul>
        <div class="task-counter">
            <p>Total: <span id="total-tasks">0</span></p>
            <p>Completed: <span id="completed-tasks">0</span></p>
            <p>Pending: <span id="pending-tasks">0</span></p>
        </div>
        <button class="clear-completed" id="clear-completed-btn">Clear Completed Tasks</button>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const taskInput = document.getElementById("task-input");
            const addTaskBtn = document.getElementById("add-task-btn");
            const taskList = document.getElementById("task-list");
            const totalTasks = document.getElementById("total-tasks");
            const completedTasks = document.getElementById("completed-tasks");
            const pendingTasks = document.getElementById("pending-tasks");
            const filterAllBtn = document.getElementById("filter-all");
            const filterCompletedBtn = document.getElementById("filter-completed");
            const filterPendingBtn = document.getElementById("filter-pending");
            const clearCompletedBtn = document.getElementById("clear-completed-btn");
            const darkModeToggle = document.getElementById("dark-mode");
            const dueDateInput = document.getElementById("due-date-input");

            let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
            let filter = "all";  // default filter

            const saveTasks = () => {
                localStorage.setItem("tasks", JSON.stringify(tasks));
            };

            const renderTaskItem = (task, index) => {
                const taskItem = document.createElement("li");
                taskItem.className = task.completed ? "completed" : "";
                taskItem.innerHTML = `
                    <span contenteditable="true" class="task-text">${task.text}</span>
                    <span class="due-date">${task.dueDate ? `Due: ${task.dueDate}` : ''}</span>
                    <div>
                        <button class="complete-btn" aria-label="Complete Task">✔</button>
                        <button class="delete-btn" aria-label="Delete Task">✘</button>
                    </div>
                `;
                taskItem.querySelector(".complete-btn").addEventListener("click", () => toggleTaskCompletion(index));
                taskItem.querySelector(".delete-btn").addEventListener("click", () => deleteTask(index));
                taskItem.querySelector(".task-text").addEventListener("blur", (e) => editTaskText(index, e.target.innerText));
                return taskItem;
            };

            const renderTasks = () => {
                taskList.innerHTML = "";
                let filteredTasks = tasks.filter(task => filter === "all" || task.completed === (filter === "completed"));
                filteredTasks.forEach((task, index) => taskList.appendChild(renderTaskItem(task, index)));
                updateCounters();
            };

            const updateCounters = () => {
                totalTasks.innerText = tasks.length;
                completedTasks.innerText = tasks.filter(task => task.completed).length;
                pendingTasks.innerText = tasks.filter(task => !task.completed).length;
            };

            const toggleTaskCompletion = (index) => {
                tasks[index].completed = !tasks[index].completed;
                saveTasks();
                renderTasks();
            };

            const deleteTask = (index) => {
                tasks.splice(index, 1);
                saveTasks();
                renderTasks();
            };

            const editTaskText = (index, newText) => {
                tasks[index].text = newText;
                saveTasks();
            };

            addTaskBtn.addEventListener("click", () => {
                const taskText = taskInput.value.trim();
                const dueDate = dueDateInput.value;
                if (taskText === "") {
                    alert("Task text cannot be empty.");
                    return;
                }
                tasks.push({ text: taskText, completed: false, dueDate: dueDate });
                saveTasks();
                renderTasks();
                taskInput.value = "";
                dueDateInput.value = "";
            });

            filterAllBtn.addEventListener("click", () => {
                filter = "all";
                renderTasks();
            });

            filterCompletedBtn.addEventListener("click", () => {
                filter = "completed";
                renderTasks();
            });

            filterPendingBtn.addEventListener("click", () => {
                filter = "pending";
                renderTasks();
            });

            clearCompletedBtn.addEventListener("click", () => {
                tasks = tasks.filter(task => !task.completed);
                saveTasks();
                renderTasks();
            });

            const darkModePreference = localStorage.getItem("dark-mode") === "true";
            if (darkModePreference) {
                document.body.classList.add("dark-mode");
                document.querySelector(".container").classList.add("dark-mode");
                darkModeToggle.checked = true;
            }

            darkModeToggle.addEventListener("change", () => {
                const isDarkMode = darkModeToggle.checked;
                document.body.classList.toggle("dark-mode", isDarkMode);
                document.querySelector(".container").classList.toggle("dark-mode", isDarkMode);
                localStorage.setItem("dark-mode", isDarkMode);
            });

            renderTasks();
        });
    </script>
</body>
</html>
